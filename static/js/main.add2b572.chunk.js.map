{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["E","enviroment","x","window","alert","String","f","itp","ArrowInterpreter","stdize","str","replace","d","charCodeAt","urlToData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","pth","wrap","_context","prev","next","console","log","fetch","sent","text","abrupt","data","id","stop","_x","apply","this","arguments","urlMerger","url1","url2","path","dirname","join","CmdInput","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","react_default","createElement","style","display","color","onChange","e","setState","target","value","onKeyPress","key","onCommand","type","flexGrow","border","background","Component","defaultProps","App","height","flexDirection","className","App_CmdInput","_ref2","_callee2","txt","_context2","t0","Function","parseCmd","t1","t2","_x2","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.add2b572.chunk.js","sourcesContent":["import React, { Component , PropTypes } from 'react';\nimport './App.css';\nimport { ArrowInterpreter } from 'arrowlang/interpreter';\nimport E from 'arrowlang/std/env';\nimport path from 'path';\n\nE.enviroment = (x)=>window.alert(String(x));\nwindow.E = E;\nwindow.f = [];\n\nconst itp = new ArrowInterpreter();\n\nitp.urlToData = async (url) => {\n  let pth = url+'.far';\n  console.log(fetch);\n  let x = await fetch(pth);\n  x = await x.text();\n  return { data : stdize(x+\"\") , id : pth };\n}\nitp.urlMerger = (url1,url2) => {\n  url1 = path.dirname(url1);\n  return path.join(url1,url2);\n}\n\nfunction stdize(str){\n\treturn str.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function(d) {\n\t\treturn d.charCodeAt(0) - 1632; // Convert Arabic numbers\n\t}).replace(/[۰۱۲۳۴۵۶۷۸۹]/g, function(d) {\n\t\treturn d.charCodeAt(0) - 1776; // Convert Persian numbers\n\t}).replace(/٪/g,'%');\n}\n\nclass CmdInput extends Component {\n  constructor(props){\n    super(props);\n    this.state = {text : ''};\n  }\n  \n  static defaultProps = {\n      onCommand: ()=>{}\n  };\n\n  render() {\n    return (\n      <div style= {{display:'flex'}}>\n        <span style = {{color:'cyan'}}> >>>&ensp; </span>\n        <input  onChange = {(e)=>this.setState({text : e.target.value})}\n                onKeyPress = {(e)=>{\n                  if (e.key === 'Enter'){\n                    this.props.onCommand(this.state.text);\n                    this.setState({text: ''});  \n                  }\n                }}\n                value = {this.state.text}\n                type = \"text\" \n                style = {{ flexGrow:1 ,border:'none', background : 'black', color : 'white'}}/>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div style = {{background : 'black', height : '100vh', display : 'flex', flexDirection : 'column'}}>\n        <div style = {{flexGrow : 1}}>\n\n        </div>\n        <hr className = \"style-one\"/>\n        <CmdInput onCommand = {async (txt)=>new Function(await itp.parseCmd(stdize(txt)))()}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}